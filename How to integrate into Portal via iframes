How to integrate into Portal via iframes:

Overview
Web Portal provides an integration layer to modules via iframes to integrate their UIs. This document describes the process of the integration with Portal via iframes.

When a module is integrated, its views are displayed in the content area (green) as depicted in the following screenshots. The blue part (header, footer, navigation) is provided by Web Portal whereas the green part (content) is given by the module.

Preconditions
The Iframe integration is available from Web Portal v4.8 on
Web Portal is set up and running (MACMA is required, or AccessControl v3 in case of an MES deployment)
The module to be registered has an application in MACMA (or AccessControl v3 respectively). This application needs the role Portal Registration assigned in order to be permitted to register at Web Portal.

UI Features
Navigation integration
Modules can register navigation entries which will be shown in the navigation on the left side. When clicking on the navigation entries, the corresponding view of the module is shown in the content area.

The navigation menu only allows two levels of navigation. In order to further breakdown the navigation, modules can offer a third-level in a tab bar (tab control) spanning the whole content area. Currently, the tab bar needs to be given by the module UI. However, it is planned for 09/2022 to move this functionality to Web Portal. Modules can then define the third-level via the views API and Web Portal will display these entries in a tab bar.


Disclosure Documents
This is only available for modules registered via API.
Third-party open source software disclosure documents are provided by each module and are accessible via the Disclosure Documents view in the header.

API Documentation
This is only available for modules registered via API.

Modules can register their public API documentation (OpenAPI 3.0 specification) which will be rendered and provided to users by Portal. Consider that the public API documentation is accessible without any authentication. Do not ever provide any credentials in the API documentation (e.g. client ID or client secret).
Technical Integration
There are two ways to integrate views into Web Portal:

via UI for registering views - navigation entries will appear in the custom section in the menu,
or via Web Portal's API - navigation entries will appear in the managed section in the menu (alignment with Portfolio Management necessary).
The registered views are requested by Web Portal and displayed in an iframe when a user accesses the view during run-time.

Consider the technical limitations in chapter Technical Restritions

Manual registration via registration views
When registering views manually, these views will appear in a separate section in the menu. They will not appear in the managed section (above the line).

In order to register a new application, Web Portal provides two configuration views to register new applications and its views. To enter the views, the user must have the Portal System Admin role assigned.

An application in the Web Portal context acts as a container for views (like UI pages), widgets (for use on the dashboard), documents (like disclosure documents) and contexts (for inter-module interactions). That means, to add custom views, an application has to be created first.

Automatic registration via API
Prerequisites
Web Portal's registration API requires authentication via MACMA. I.e. a valid MACMA access token is to be sent with the registration request
The MACMA client used for the request has to have Web Portal's "Portal Registration" role assigned for authorization
After the registration request, Web Portal will fetch data from the module APIs using a MACMA token (refer to the registration flow below). If the module APIs required authentication, it needs to be able to handle the MACMA token sent by Web Portal.
Registration Flow
To register, a PUT request is to be sent to Web Portal's registry. When authorized, Web Portal will start calling various APIs to be provided by the module based on the base URL which is given in the registration request. That means, Web Portal is pulling the information from the module's APIs directly, instead of the information being pushed to Web Portal.

Refer to the back-end implementation guide chapter on this page for the APIs to provide to Web Portal.

Technical Restrictions 
The iframe integration has some technical restrictions due to the constraints browsers put on iframes.

The sandbox attribute of the iframe is set to allow-same-origin allow-scripts allow-modals allow-forms allow-downloads allow-popups.



Headers
The view to be displayed in Web Portal's iframe needs to allow the same. There are two HTTP headers that might prevent this. If one of those headers is set to a restrictive value, the view cannot be loaded within an iframe.

X-FRAME-OPTIONS - if set to DENY, the page cannot be loaded in an iframe. It could be set to ALLOW-FROM, but it is not supported by all browsers. Best option would be to not set it at all.
Content-Security-Policy: frame-ancestors 'none' - if set, but Web Portal's domain is not in the whitelist, the page cannot be displayed in the iframe. If you need to set CSP, please allow Web Portal's domain.

Modals/dialogs
The content of the module's UI is limited by the iframe's size. Consider this when opening modals in the UI and apply a styling so that they are not cut and therefore would be unusable for the users.

Communication with Web Portal
The only way for the module's UI to communicate with Web Portal's frame is via the postMessage API. In order for the deep-linking, getting user settings (language etc.), messages, and more to work, Web Portal requires the module UI to implement a front-end API which is specified in UI API.

Communication with other module's back-end API
This is less a restriction of the iframe integration but a consequence of MACMA's single audience mode. One module UI cannot simply call another module's back-end API. Consider reading MACMA's documentation.

Sanitizing IFrame URLs
Every URL which is put into the "src" attribute of the <iframe> tag where your app is running inside, is getting sanitized by encodeURIComponent() or encodeURI().

Popups
Since allow-popups attribute is added to iFrame, module developers have possibility to use popups. With agreement with UI/US guild we recommend to follow Modal Windows - UI Guidelines when using them. 


Back-end Implementation Guide
Registration Request
In order to register a module at Web Portal, it has to send a request to the Web Portal's registration API and provide an portal-api/v1/info endpoint (see below) that is called by Web Portal after the request is placed.

 Portal Api used for registration
 
 Method	
PUT

Resource path	
<PORTAL_URL>/registry/api/v1/registry/systems/<id>
Parameter	
id (String): Unique identifier of the module which is by default the MACMA related clien id which is configured for the System.
This has to be the same as provided by the info endpoint
name (String): Name of the module.
This has to be the same as provided by the info endpoint
BCI applications refer to [NEXOPS] Application display names (SCS names and module configuration)
baseUrl (String): Base URL under which the system is exposed
Set it to the same as provided by the info endpoint
authProviderClientId (String): The client id you receive from the IAS auth provider (usually MACMA)
Authentication / Authorization	
Bearer authentication

Permissions needed:

Add+Modify	api	system-registration
(assigned to role Portal_Registration)

Example call

PUT http://nexeed-ias.de.bosch.com/registry/api/v1/registry/systems/macma
{
    "name": "Access Management",
    "baseUrl": "http://nexeed-integration.de.bosch.com/iam"
}


Comments

calling this interface twice with the same data will result in a replace of old data in the Module Registry. So no error is returned. An update of views is performed when there is a change in the info provided (e.g. version)
the delivered information is persisted and will not be deleted
deletion of a module from the Module registry can only be done by a System Admin role and a manual API call
Example response

201
{
}

Response codes

200 OK	Module exists in registry and was updated successfully
201 Created	Module successfully registered
400 Bad Request	E.g. validation unsuccessful or /info endpoint could not be reached
401 Unauthorized	Invalid token sent with the request
403 Forbidden	Permission to register system missing (see authorization info above)


Module APIs
There are APIs Web Portal will try to call on module-side after registration request. One of which is /info which is required to successfully finish registration.




Error: 403


/info	Registration. Provides version information, for example.	Mandatory for registration and updates.
/views	Entries in the navigation menu. Provides menu entries and the respective links to be displayed.	Mandatory if menu entries shall be displayed in the navigation menu.
/documents	Document collection. Two types of documents are collected and displayed to the user currently: Open-source software disclosure documents and Public API documentation. 	Mandatory if disclosure documents or Public API Documentation shall be displayed.
/context-contributions	Context Contribution. Flexible way to display data from other modules. Currently only contributions of type DATA can be provided. Refer to Context/Contribution Concept and Contexts Published Language for more information.	Mandatory if module wants to contribute to certain contexts.
/widgets	
Dashboard widgets. Provides widgets to be displayed in the widget catalog on the dashboard. 

Mandatory if widgets shall be provided in the dashboard.

