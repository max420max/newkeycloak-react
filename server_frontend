app->
app.js

// Needed for redux-saga es6 generator support
import '@babel/polyfill';

// Import all the third party stuff
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import FontFaceObserver from 'fontfaceobserver';
import { BrowserRouter as Router } from 'react-router-dom';

import './assets/css/bootstrap.min.css';
import '!file-loader?name=[name].[ext]!./favicon.ico';
import 'react-redux-toastr/lib/css/react-redux-toastr.min.css';
import 'sanitize.css/sanitize.css';
import './assets/sass/typography.scss';
import './assets/sass/toasts.scss';
// Import redux store with history
import store from './store';

// Import root app
import App from './components/App';

// Import Language Provider
import LanguageProvider from './components/LanguageProvider';
import { DEFAULT_LOCALE } from './components/LanguageProvider/slice';

// Import MACMA Provider
import { MacmaProvider } from './components/MacmaAuth';

// Import i18n messages
import { translationMessages, appLocales } from './i18n';

// Import CSS reset and Global Styles
import './global-styles.css';
import ErrorBoundary from './pages/ErrorBoundary';

require('./manifest.json');

// Observe loading of Open Sans (to remove open sans, remove the <link> tag in
// the index.html file and this observer)
const openSansObserver = new FontFaceObserver('Open Sans', {});

// When Open Sans is loaded, add a font-family using Open Sans to the body
openSansObserver.load().then(() => {
  document.body.classList.add('fontLoaded');
});

const MOUNT_NODE = document.getElementById('app');
const render = messages => {
  ReactDOM.render(
    <Provider store={store}>
      <MacmaProvider>
        <LanguageProvider messages={messages} defaultLocale={getUserLocale()}>
          <Router basename={process.env.WEB_CONTEXT || ''}>
            <ErrorBoundary>
              <App />
            </ErrorBoundary>
          </Router>
        </LanguageProvider>
      </MacmaProvider>
    </Provider>,
    MOUNT_NODE,
  );
};

const getUserLocale = () => {
  const userLocale =
    window.navigator.userLanguage || window.navigator.language?.split('-')[0];
  return appLocales.includes(userLocale) ? userLocale : DEFAULT_LOCALE;
};

if (module.hot) {
  // Hot reloadable React components and translation json files
  // modules.hot.accept does not accept dynamic dependencies,
  // have to be constants at compile-time
  module.hot.accept(['./i18n', 'components/App'], () => {
    ReactDOM.unmountComponentAtNode(MOUNT_NODE);
    render(translationMessages);
  });
}

// Chunked polyfill for browsers without Intl support
if (!window.Intl) {
  Promise.resolve(import('intl'))
    .then(() =>
      Promise.all([
        import('intl/locale-data/jsonp/en.js'),
        import('intl/locale-data/jsonp/de.js'),
        import('intl/locale-data/jsonp/fr.js'),
        import('intl/locale-data/jsonp/cs.js'),
        import('intl/locale-data/jsonp/zh.js'),
      ]),
    ) // eslint-disable-line prettier/prettier
    .then(() => render(translationMessages))
    .catch(err => {
      throw err;
    });
} else {
  render(translationMessages);
}

------------------------
=============================================================================================================
app-> component-> app
index.js

import React, { useCallback, useEffect, useContext } from 'react';
import { connect } from 'react-redux';
import ReduxToastr from 'react-redux-toastr';
import { Redirect, Route, Switch, withRouter } from 'react-router-dom';
import { createStructuredSelector } from 'reselect';
import { Quill } from 'react-quill';
import { compose } from 'redux';
import { AuthContext } from 'react-oauth2-code-pkce';

import { isNotEmpty } from '../../utils/collection';

import {
  isLocalEnvironment,
  isApprover,
  isPlanner,
  isWorker,
  isKeyUser,
  isAuth,
  isWorkerOrSetter,
} from '../../utils/helper';
import { isTokenExpired } from '../../utils/token';
import DocumentLibrary from '../../pages/DocumentLibrary/Loadable';
import LevelOne from '../../pages/LevelOne/Loadable';
import Login from '../../pages/Login/Loadable';
import WorkplaceOverview from '../../pages/WorkplaceOverview/Loadable';
import AdditionalActivities from '../../pages/AdditionalActivities/Loadable';
import WorkStepAdministration from '../../pages/WorkStepAdministration/Loadable';
import { makeSelectSpinner } from './selectors';
import MyLink from '../../libs/CustomTextEditor/MyLink';
import LoadingIndicator from '../LoadingIndicator';
import { login } from '../../pages/Login/saga';
import { logout } from '../Layout/Header/saga';
import SetCurrentItemView from '../../pages/SetCurrentItemView';
import Dashboard from '../../pages/Dashboard';
import WorkerDocumentList from '../../pages/WorkerDocumentList';
import PartNumbers from '../../pages/PartNumbers';
import PartOperationWizardView from '../../pages/Wizard/PartOperationWizardView';
import WorkersAssignment from '../../pages/WorkersAssignment';
import TenantConfiguration from '../../pages/TenantConfiguration';
import LogoutButton from '../LogoutButton';
import QuillCharLimitCounter from '../QuillCharLimitCounter/QuillCharLimitCounter';
import PlainTextClipboard from '../Quill/PlainTextClipboard';
import {
  makeSelectCurrentUser,
  makeSelectIsAutomaticLoginPrevented,
} from '../Layout/selectors';
import UsageListWizard from '../../pages/Wizard/UsageListWizard';
import PartNumbersProvider from '../PartNumbersProvider';
import { MacmaRefreshAuth } from '../MacmaAuth';

import AppPropsType from './types';

// eslint-disable-next-line  no-unused-vars
import styles from './styles.scss';

function quillRegisterModules() {
  Quill.register(MyLink, true);
  Quill.register('modules/counter', QuillCharLimitCounter);
  Quill.register('modules/clipboard', PlainTextClipboard, true);
}

quillRegisterModules();
let eventSource = null;
let macmaLogout = null;

function App(props) {
  const { logout: mLogout } = useContext(AuthContext);
  macmaLogout = mLogout;
  const isUserAuth = !!isAuth();

  const { wamLogin, wamLogout, isAutomaticLoginPrevented } = props;

  useEffect(
    () => {
      if (!isLocalEnvironment) {
        return;
      }

      if (isTokenExpired()) {
        wamLogout({ reload: true });
      }

      if (!isUserAuth && !isAutomaticLoginPrevented) {
        wamLogin({
          email: '',
          password: '',
          grant_type: 'wam',
        });
      }
    },
    [wamLogout, wamLogin, isUserAuth, isAutomaticLoginPrevented],
  );

  const logoutApp = useCallback(
    () => {
      wamLogout({ reload: true });
    },
    [wamLogout],
  );

  const setLastLogoutDetailsAndWamLogout = useCallback(
    notification => {
      if (notification) {
        localStorage.setItem('lastLogoutDetails', JSON.stringify(notification));
        wamLogout({ reload: true });
      }
    },
    [wamLogout],
  );

  const validateLogout = useCallback(
    e => {
      const loadedWorkplace = getItemFromLocalStorage('loadedWorkplace');
      if (loadedWorkplace) {
        const logoutNotifications = getWorkerLogoutNotifications(e.data);
        const lastLogoutDetails = getItemFromLocalStorage('lastLogoutDetails');
        if (lastLogoutDetails && isNotEmpty(logoutNotifications)) {
          logoutNotifications.map(n => {
            const notification = JSON.parse(n);
            if (
              shouldLogout(notification, loadedWorkplace, lastLogoutDetails)
            ) {
              setLastLogoutDetailsAndWamLogout(n);
            }
          });
        } else if (isNotEmpty(logoutNotifications)) {
          const lastLogoutNotification = logoutNotifications.slice(-1).pop();
          setLastLogoutDetailsAndWamLogout(lastLogoutNotification);
        }
      }
    },
    [setLastLogoutDetailsAndWamLogout],
  );

  useEffect(
    () => {
      if (isWorker() && !eventSource) {
        const factoryCode = JSON.parse(localStorage.getItem('currentUser'))
          ?.tenant?.factoryCode;

        if (factoryCode) {
          const url = `${
            process.env.ELWIS_BE_DIRECT_URL
          }/api/v1/sse-server/stream-flux?factoryCode=${factoryCode}`;
          eventSource = new EventSource(url);

          eventSource.addEventListener('WORKERS_LOGOUT', e => {
            validateLogout(e);
          });

          eventSource.onerror = () => {
            eventSource.close();
          };
        }
      }
    },
    [wamLogin, wamLogout, props.currentUser, validateLogout],
  );

  const shouldLogout = (notification, loadedWorkplace, lastLogoutDetails) => {
    const notificationWorkplaceId = parseInt(notification.workplaceId, 10);
    const loadedWorkplaceId = parseInt(loadedWorkplace.id, 10);
    const notificationCurrentId = parseInt(notification.currentItemId, 10);
    const loadedWorkplaceCurrentId = parseInt(
      loadedWorkplace.currentItem?.id,
      10,
    );
    const notificationTimeStamp = parseInt(notification.timeStamp, 10);
    const lastLogoutTimeStamp = parseInt(
      JSON.parse(lastLogoutDetails).timeStamp,
      10,
    );
    return (
      notificationWorkplaceId === loadedWorkplaceId &&
      (!notificationCurrentId ||
        notificationCurrentId !== loadedWorkplaceCurrentId) &&
      notificationTimeStamp > lastLogoutTimeStamp
    );
  };

  const getItemFromLocalStorage = key => {
    const value = localStorage.getItem(key);
    return value && value !== 'undefined' ? JSON.parse(value) : null;
  };

  const getWorkerLogoutNotifications = data => (data ? JSON.parse(data) : null);

  return (
    <>
      <div>
        <div className="modalBlur" />
        {/* <Helmet titleTemplate="Bosch-FuP" /> */}
        <Switch>
          <Route
            exact
            path="/"
            render={() => {
              let route =
                isPlanner() || isApprover()
                  ? '/Dashboard'
                  : '/WorkplaceOverview';

              if (isKeyUser()) {
                route = '/TenantConfiguration';
              }

              return !isUserAuth ? <Login /> : <Redirect to={route} />;
            }}
          />
          <Route
            path="/WorkplaceOverview"
            render={routeProps =>
              isWorkerOrSetter() ? (
                <WorkplaceOverview {...routeProps} />
              ) : (
                <Redirect to="/Dashboard" />
              )
            }
          />
          <Route
            path="/LevelOne/:workplaceId/SetCurrentItem"
            render={routeProps =>
              !isUserAuth ? (
                <Redirect to="/" />
              ) : (
                <PartNumbersProvider>
                  {({
                    loadAssignedPartNumbersInUse,
                    assignedPartNumbersInUseData: {
                      assignedPartNumbersInUse,
                      isAssignedPartNumbersInUseLastPage,
                    },
                  }) => (
                    <SetCurrentItemView
                      loadAssignedPartNumbersInUse={
                        loadAssignedPartNumbersInUse
                      }
                      assignedPartNumbersInUse={assignedPartNumbersInUse}
                      isAssignedPartNumbersInUseLastPage={
                        isAssignedPartNumbersInUseLastPage
                      }
                      {...routeProps}
                    />
                  )}
                </PartNumbersProvider>
              )
            }
          />
          <Route
            exact
            path="/LevelOne/:workplaceId"
            render={routeProps =>
              !isUserAuth ? (
                <Redirect to="/" />
              ) : (
                <PartNumbersProvider>
                  {({
                    loadAssignedPartNumbersInUse,
                    assignedPartNumbersInUseData: {
                      assignedPartNumbersInUse,
                      isAssignedPartNumbersInUseLastPage,
                    },
                  }) => (
                    <LevelOne
                      loadAssignedPartNumbersInUse={
                        loadAssignedPartNumbersInUse
                      }
                      assignedPartNumbersInUse={assignedPartNumbersInUse}
                      isAssignedPartNumbersInUseLastPage={
                        isAssignedPartNumbersInUseLastPage
                      }
                      {...routeProps}
                    />
                  )}
                </PartNumbersProvider>
              )
            }
          />
          <Route
            path="/AdditionalActivities/:workplaceId"
            render={routeProps =>
              !isUserAuth || !isWorkerOrSetter() ? (
                <Redirect to="/" />
              ) : (
                <AdditionalActivities {...routeProps} />
              )
            }
          />
          <Route
            path="/WorkStepAdministration/:type/:workplaceId/:workSequenceId/:workStepNumber/:version?"
            render={routeProps =>
              !isUserAuth ? (
                <Redirect to="/" />
              ) : (
                <WorkStepAdministration {...routeProps} />
              )
            }
          />
          <Route
            path="/WorkStepAdministration/:type/:workplaceId/:workSequenceId/:version?"
            render={routeProps =>
              !isPlanner() ? (
                <Redirect to="/" />
              ) : (
                <WorkStepAdministration {...routeProps} />
              )
            }
          />
          <Route
            path="/DocumentLibrary/:workplaceId"
            render={routeProps =>
              !isUserAuth ? (
                <Redirect to="/" />
              ) : (
                <DocumentLibrary {...routeProps} />
              )
            }
          />
          <Route
            path="/Dashboard"
            render={routeProps =>
              !(isPlanner() || isApprover()) ? (
                <Redirect to="/" />
              ) : (
                <Dashboard {...routeProps} />
              )
            }
          />
          <Route
            path="/LevelOne/:workplaceId/:documentListId"
            render={routeProps =>
              isWorkerOrSetter() || isApprover() ? (
                <WorkerDocumentList {...routeProps} />
              ) : (
                <Redirect to="/" />
              )
            }
          />
          <Route
            path="/PartNumbers"
            render={routeProps =>
              isPlanner() ? (
                <PartNumbersProvider>
                  {({
                    loadAllPartNumbers,
                    savePartNumberPicture,
                    deletePartNumberPicture,
                    allPartNumbersData: {
                      allPartNumbers,
                      isAllPartNumbersLastPage,
                    },
                  }) => (
                    <PartNumbers
                      loadAllPartNumbers={loadAllPartNumbers}
                      allPartNumbers={allPartNumbers}
                      isAllPartNumbersLastPage={isAllPartNumbersLastPage}
                      savePicture={savePartNumberPicture}
                      deletePicture={deletePartNumberPicture}
                      {...routeProps}
                    />
                  )}
                </PartNumbersProvider>
              ) : (
                <Redirect to="/" />
              )
            }
          />
          <Route
            path="/PartWizard/:partNumber/:operationNumber/:partId/:action"
            render={routeProps =>
              isPlanner() ? (
                <PartOperationWizardView {...routeProps} />
              ) : (
                <Redirect to="/" />
              )
            }
          />
          <Route
            path="/TenantConfiguration"
            render={routeProps =>
              isKeyUser() ? (
                <TenantConfiguration {...routeProps} />
              ) : (
                <Redirect to="/" />
              )
            }
          />
          <Route
            path="/usageList/:type/:workplaceId/:workSequenceId/:workStepId"
            render={routeProps =>
              isPlanner() ? (
                <UsageListWizard {...routeProps} />
              ) : (
                <Redirect to="/" />
              )
            }
          />
          <Route
            path="/WorkersAssignment"
            render={routeProps =>
              isApprover() ? (
                <WorkersAssignment {...routeProps} />
              ) : (
                <Redirect to="/" />
              )
            }
          />
          <Route path="/*" render={() => <Redirect to="/" />} />
        </Switch>
        <ReduxToastr
          timeOut={5000}
          newestOnTop
          position="top-right"
          transitionIn="fadeIn"
          transitionOut="fadeOut"
          progressBar
          closeOnToastrClick
          preventDuplicates
        />
      </div>

      {props.Spinner > 0 && <LoadingIndicator />}
      {isUserAuth && isLocalEnvironment && <LogoutButton onClick={logoutApp} />}
      {isUserAuth && !isLocalEnvironment && <MacmaRefreshAuth />}
    </>
  );
}

App.propTypes = AppPropsType;

App.defaultProps = {
  Spinner: 0,
  location: null,
};

const mapStateToProps = createStructuredSelector({
  Spinner: makeSelectSpinner(),
  isAutomaticLoginPrevented: makeSelectIsAutomaticLoginPrevented(),
  currentUser: makeSelectCurrentUser(),
});

function mapDispatchToProps(dispatch) {
  return {
    dispatch,
    wamLogin: value => {
      dispatch(login(value));
    },
    wamLogout: value => {
      const logoutParams = isLocalEnvironment
        ? value
        : { ...value, macmaLogout };
      dispatch(logout(logoutParams));
      if (eventSource) {
        eventSource.close();
      }
    },
  };
}

const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps,
);

export { App, quillRegisterModules };

export default compose(
  withRouter,
  withConnect,
)(App);

----------------------------------------
app-> component -> MacmaAuth
constants.js


const PROVIDER_RE_RENDER_TIME = 60 * 1000;
const PROVIDER_RE_RENDER_DELAY_TIME = 300;

export { PROVIDER_RE_RENDER_TIME, PROVIDER_RE_RENDER_DELAY_TIME };

---------------------

index.js

import MacmaProvider from './MacmaProvider';
import MacmaContext from './MacmaContext';
import MacmaRefreshAuth from './MacmaRefreshAuth';

export { MacmaProvider, MacmaContext, MacmaRefreshAuth };


--------------------
MacmaContext.js

import { useContext } from 'react';
import { AuthContext } from 'react-oauth2-code-pkce';

const MacmaContext = () => {
  useContext(AuthContext);
  return null;
};

export default MacmaContext;


----------------------
MacmaProvider.js

import React, { useMemo } from 'react';
import { AuthProvider } from 'react-oauth2-code-pkce';

import LoadingIndicator from '../LoadingIndicator';

import { isLocalEnvironment, getToken } from '../../utils/helper';

const MacmaProvider = ({ children }) => {
  const authConfig = useMemo(() => {
    const queryParams = new URLSearchParams(window.location.search);
    const tenantId = queryParams.get('tenantId') || process.env.TENANT_ID;
    const clientId = queryParams.get('clientId') || process.env.CLIENT_ID;
    const baseUrl = `${
      process.env.NEXEED_DOMAIN_BASE_URL
    }/iam/auth/realms/${tenantId}/protocol/openid-connect`;

    return {
      clientId: `${clientId}-frontend`,
      authorizationEndpoint: `${baseUrl}/auth`,
      logoutEndpoint: `${baseUrl}/logout`,
      tokenEndpoint: `${baseUrl}/token`,
      redirectUri: isLocalEnvironment
        ? 'http://localhost:3000'
        : `${process.env.ELWIS_DOMAIN_BASE_URL}/Dashboard`,
      scope: 'openid',
      decodeToken: true,
      postLogin: () => {
        window.location.reload();
      },
      onRefreshTokenExpire: event => event.login(),
    };
  }, []);

  return (
    <>
      {isLocalEnvironment ? (
        children
      ) : (
        <AuthProvider authConfig={authConfig}>
          {getToken() ? children : <LoadingIndicator />}
        </AuthProvider>
      )}
    </>
  );
};

export default MacmaProvider;


----------------
MacmaRefereshAuth.js

import React, { useEffect, useState } from 'react';

import MacmaContext from './MacmaContext';
import MacmaProvider from './MacmaProvider';

import { getToken } from '../../utils/helper';
import {
  PROVIDER_RE_RENDER_TIME,
  PROVIDER_RE_RENDER_DELAY_TIME,
} from './constants';

const MacmaRefreshAuth = () => {
  const [forceUpdate, setForceUpdate] = useState(false);
  const [token, setToken] = useState(getToken());

  useEffect(() => {
    const intervalId = setInterval(() => {
      const currentToken = getToken();
      if (token !== currentToken) {
        setToken(currentToken);
        setForceUpdate(false);
        setTimeout(() => setForceUpdate(true), PROVIDER_RE_RENDER_DELAY_TIME);
      }
    }, PROVIDER_RE_RENDER_TIME);
    return () => clearInterval(intervalId);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <>
      {forceUpdate && (
        <MacmaProvider>
          <MacmaContext />
        </MacmaProvider>
      )}
    </>
  );
};

export default MacmaRefreshAuth;

---------------------
=========================
utils-> apiStore

ApiStoreProvider.js

import { ApiStoreProvider } from './request';
import store from '../../store';
import {
  loadedCurrentUser,
  setIsAutomaticLoginPrevented,
} from '../../components/Layout/slice';

const actionOnError = error => {
  const { status } = error.response;

  if (status === 401 || status === 403) {
    localStorage.removeItem('currentUser');
    localStorage.removeItem('token');

    store.dispatch(setIsAutomaticLoginPrevented(true));
    store.dispatch(loadedCurrentUser(null));
  }
};

export default new ApiStoreProvider(actionOnError);

-------------
constant.js

/* eslint-disable prefer-destructuring */
const API_URL = process.env.API_URL;
const LOGIN_URL = process.env.LOGIN_URL;
const PASSWORD = process.env.PASSWORD;
const NODE_ENV = process.env.NODE_ENV;

const auth = {
  username: 'elwis-frontend-client',
  password: PASSWORD,
};

const defaultHeaders = {
  'If-Modified-Since': 'Mon, 26 Jul 1997 05:00:00 GMT',
  'Cache-Control': 'no-cache',
  Pragma: 'no-cache',
};

export { API_URL, LOGIN_URL, NODE_ENV, auth, defaultHeaders };

--------------------------------------

endpoints.json


[
  {
    "key": "workplace",
    "path": "/workplace"
  },
  {
    "key": "workplaces",
    "path": "/workplaces"
  },
  {
    "key": "user",
    "path": "/user"
  },
  {
    "key": "workSequence",
    "path": "/worksequence"
  },
  {
    "key": "item",
    "path": "/item"
  },
  {
    "key": "itemWorkplace",
    "path": "/item/workplace"
  },
  {
    "key": "symbol",
    "path": "/symbol"
  },
  {
    "key": "model",
    "path": "/model"
  },
  {
    "key": "modelchangediff",
    "path": "/modelchangediff"
  },
  {
    "key": "documents",
    "path": "/documents"
  },
  {
    "key": "filesLink",
    "path": "/files",
    "contentType": "multipart/form-data"
  },
  {
    "key": "applicationNames",
    "path": "/applicationnames"
  },
  {
    "key": "operationAndSerialNumber",
    "path": "/operationandserialnumber"
  },
  {
    "key": "instructions",
    "path": "/instructions",
    "contentType": "multipart/form-data"
  },
  {
    "key": "instructionsJSON",
    "path": "/instructions"
  },
  {
    "key": "dashboard",
    "path": "/dashboard"
  },
  {
    "key": "dashboardStatistics",
    "path": "/dashboard/statistics"
  },
  {
    "key": "workerDocumentList",
    "path": "/workplaces"
  },
  {
    "key": "workersAssignment",
    "path": "/workers-assignment"
  },
  {
    "key": "workflowList",
    "path": "/workflow"
  },
  {
    "key": "partOperation",
    "path": "/part-operation"
  },
  {
    "key": "tenant",
    "path": "/tenant"
  },
  {
    "key": "tenantConfiguration",
    "path": "/tenant-configuration"
  },
  {
    "key": "manufacturingArea",
    "path": "/manufacturing-area"
  },
  {
    "key": "orgOffice",
    "path": "/org-office"
  },
  {
    "key": "workStep",
    "path": "/work-step"
  },
  {
    "key": "usageList",
    "path": "/usage-list"
  },
  {
    "key": "pqi",
    "path": "/pqi"
  },
  {
    "key": "basicAuth",
    "path": "/basic-auth"
  }
]


-------------------------

request.js

/* eslint-disable prefer-destructuring */
import axios from 'axios';
import toastr from '../customToastr';
import { getToken } from '../helper';
import errorsMessages from '../messages/errors';
import {
  API_URL,
  LOGIN_URL,
  NODE_ENV,
  auth,
  defaultHeaders,
} from './constants';

const endpoints = require('./endpoints.json');

function displayServerErrorMsg(msg) {
  return NODE_ENV !== 'production' ? `(${msg})` : '';
}

class ApiStoreProvider {
  constructor(actionOnError) {
    this.localStorage = {};
    this.localStorage.token = getToken();
    this.actionOnError = actionOnError;
    this.apiStore = new ApiStore(this.localStorage.token, this.actionOnError);
  }

  get store() {
    const token = getToken();
    if (this.localStorage.token !== token) {
      this.localStorage.token = token;

      this.apiStore = new ApiStore(this.localStorage.token, this.actionOnError);
    }
    return this.apiStore;
  }
}

class ApiStore {
  constructor(token, actionOnError) {
    this.token = token;
    this.initEndpoints(actionOnError);
  }

  createAxios(url, contentType, responseType) {
    const authHeader = process.env.PROXY_API_SERVER_URL
      ? 'ElwisAuthorization'
      : 'Authorization';

    const isBasic = this.token?.startsWith('Basic');

    return axios.create({
      baseURL: `${API_URL}${url}`,
      headers: {
        ...defaultHeaders,
        [authHeader]: isBasic ? this.token : `Bearer ${this.token}`,
        'Content-Type': contentType || 'application/json; charset=utf-8',
      },
      validateStatus(status) {
        return status >= 200 && status <= 300;
      },
      responseType: responseType || 'json',
    });
  }

  initEndpoints(actionOnError) {
    const myInterceptorSuccess = response =>
      response?.data ? response.data : response;

    const handleErrorCodeMessage = data => {
      if (data.warning) {
        toastr.warning(errorsMessages[data.warning]);
      } else if (data.error) {
        toastr.error(
          displayServerErrorMsg(data.message),
          errorsMessages[data.error],
        );
      }
    };

    const myInterceptorError = error => {
      const { response } = error;

      if (response === undefined) {
        toastr.error(errorsMessages.backendUnavailableError);

        window.location.reload();

        return Promise.reject(error);
      }

      const { data } = response;

      if (data) {
        if (data.validation) {
          return data;
        }

        handleErrorCodeMessage(data);
      } else {
        toastr.error(errorsMessages.error);
      }

      if (actionOnError && typeof actionOnError === 'function') {
        actionOnError(error);
      }

      return Promise.reject(error);
    };

    this.login = axios.create({
      baseURL: `${LOGIN_URL}/oauth/token`,
      auth,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
      },
      validateStatus: status =>
        (status >= 200 && status < 300) || status === 400,
    });
    this.login.interceptors.response.use(myInterceptorSuccess);

    this.pdf = this.createAxios('/pdf', null, 'blob');

    this.pdf.interceptors.response.use(
      response => response,
      myInterceptorError,
    );

    endpoints.forEach(endpoint => {
      const { key, path, contentType, responseType } = endpoint;
      this[key] = this.createAxios(path, contentType, responseType);

      this[key].interceptors.response.use(
        myInterceptorSuccess,
        myInterceptorError,
      );
    });
  }
}

export { displayServerErrorMsg, ApiStoreProvider };


-------------------
======================









Server ->
argv.js
module.exports = require('minimist')(process.argv.slice(2));



---------------------------------

index.js

/* eslint-disable no-console */
const express = require('express');
const compression = require('compression');
const proxy = require('http-proxy-middleware');
const { resolve } = require('path');
const logger = require('./logger');
const argv = require('./argv');
const port = require('./port');

const {
  HOST,
  PASSWORD,
  PROXY_API_IP_VERIFY,
  PROXY_API_LOG_LEVEL,
  PROXY_API_SERVER_URL,
  PROXY_API_FORWARD_PROTOCOL,
  PROXY_API_FORWARD_PORT,
  PROXY_API_FORWARD_HOST,
  WAM_ALLOWED_IP,
  WEB_CONTEXT,
} = process.env;

const app = express();

const ctx = WEB_CONTEXT || '/';
const apiPath = `${ctx}api`;
const portalApi = `${ctx}portal-api`;
const oauthPath = `${ctx}oauth`;
const outputPath = resolve(process.cwd(), 'build');

const proxyBackendOptions = {
  target: PROXY_API_SERVER_URL,
  onProxyReq(proxyReq, req) {
    if (
      req.originalUrl.startsWith(apiPath) ||
      req.originalUrl.startsWith(portalApi)
    ) {
      if (req.headers.elwisauthorization) {
        proxyReq.setHeader('Authorization', req.headers.elwisauthorization);
      }
      if (req.headers['iv-user']) {
        proxyReq.setHeader('iv-user', req.headers['iv-user']);
      }
      if (req.headers.iv_server_name) {
        proxyReq.setHeader('iv_server_name', req.headers.iv_server_name);
      }
      if (PROXY_API_FORWARD_HOST) {
        proxyReq.setHeader('X-Forwarded-Host', PROXY_API_FORWARD_HOST);
      }
      if (PROXY_API_FORWARD_PORT) {
        proxyReq.setHeader('X-Forwarded-Port', PROXY_API_FORWARD_PORT);
      }
      if (PROXY_API_FORWARD_PROTOCOL) {
        proxyReq.setHeader('X-Forwarded-Proto', PROXY_API_FORWARD_PROTOCOL);
      }
    }
  },
  logLevel: PROXY_API_LOG_LEVEL || 'info',
  xfwd: true,
  preserveHeaderKeyCase: true,
  followRedirects: true,
  secure: true,
  changeOrigin: true,
  auth: `elwis-frontend-client:${PASSWORD}`,
};

if (PROXY_API_SERVER_URL) {
  const proxyBackend = proxy(proxyBackendOptions);
  const apiPaths = [oauthPath, apiPath, portalApi];
  console.log(`Preparing proxy for paths: ${apiPaths}`);
  app.use(apiPaths, proxyBackend);
}

app.use(compression());
app.use(express.static(outputPath));

const allowedIPRegex = new RegExp(WAM_ALLOWED_IP || '.*');

app.get('*', (req, res) => {
  if (PROXY_API_IP_VERIFY === 'true') {
    let allowedRequest = false;
    const forwardHeader = req.headers['x-forwarded-for'];
    if (forwardHeader) {
      const ipAddresses = forwardHeader.split(',');
      for (let i = 0; i < ipAddresses.length; i += 1) {
        if (ipAddresses[i] && allowedIPRegex.test(ipAddresses[i].trim())) {
          console.log('ipAddresses allowed', ipAddresses);
          allowedRequest = true;
        }
      }
    }
    if (allowedRequest === false) {
      console.log(`Request ${req.url} not allowed, due to IP whitelist.`);
      res.status(403);
    }
  }
  res.sendFile(resolve(`${outputPath}${WEB_CONTEXT || ''}`, `index.html`));
});

// get the intended host and port number, use localhost and port 3000 if not provided
const customHost = argv.host || HOST;
const host = customHost || null; // Let http.Server use its default IPv6/4 host
const prettyHost = customHost || 'localhost';

app.listen(port, host, async err => {
  if (err) {
    return logger.error(err.message);
  }
  return logger.appStarted(port, prettyHost);
});


-------------------------------------
logger.js


/* eslint-disable no-console */

const chalk = require('chalk');
const ip = require('ip');

const divider = chalk.gray('\n-----------------------------------');

/**
 * Logger middleware, you can customize it to make messages more personal
 */
const logger = {
  // Called whenever there's an error on the server we want to print
  error: err => {
    console.error(chalk.red(err));
  },

  // Called when express.js app starts on given port w/o errors
  appStarted: (port, host) => {
    console.log(`Server started ! ${chalk.green('✓')}`);
    console.log(`
${chalk.bold('Access URLs:')}${divider}
Localhost: ${chalk.magenta(`http://${host}:${port}`)}
      LAN: ${chalk.magenta(`http://${ip.address()}:${port}`)}
      ${divider}
${chalk.blue(`Press ${chalk.italic('CTRL-C')} to stop`)}
    `);
  },
};

module.exports = logger;



--------------------------------------------

port.js

const argv = require('./argv');

module.exports = parseInt(argv.port || process.env.PORT || '3000', 10);


=====================================================
package.json
===================
{
  "name": "bosch-elwis",
  "version": "1.2.1-rc.98",
  "description": "Digitalisierung-Fertigungs-und-Pruefhinweise",
  "engines": {
    "npm": ">=6.14.16",
    "node": ">=14.19.0"
  },
  "scripts": {
    "prebuild": "npm run build:clean",
    "build": "cross-env NODE_ENV=production webpack --config internals/webpack/webpack.prod.babel.js --color --progress",
    "build:clean": "rimraf ./build",
    "start": "cross-env NODE_ENV=development webpack serve --config ./internals/webpack/webpack.dev.babel.js --progress",
    "start:production": "npm run test && npm run build && npm run start:prod",
    "start:prod": "DEPLOY_ENV=Production cross-env NODE_ENV=production node server",
    "start:prod:windows": "SET DEPLOY_ENV=Production & SET NODE_ENV=production & nodemon server",
    "clean:all": "npm run test:clean && npm run build:clean",
    "lint": "npm run lint:js",
    "lint:css": "stylelint './app/**/*.js'",
    "lint:eslint": "npm run prettify && eslint --ignore-path .gitignore",
    "lint:eslint:fix": "eslint --ignore-path .gitignore --fix",
    "lint:js": "npm run lint:eslint --fix . ",
    "lint-check": "eslint --print-config .",
    "lint:staged": "lint-staged",
    "pretest": "npm run test:clean",
    "test:clean": "rimraf ./coverage",
    "test": "cross-env NODE_ENV=test jest --coverage",
    "test:watch": "cross-env NODE_ENV=test jest --watchAll --verbose=false  --coverage",
    "coveralls": "cat ./coverage/lcov.info | coveralls",
    "prettify": "prettier-eslint --write 'app/**/*.{js,jsx}'"
  },
  "husky": {
    "hooks": {
      "pre-commit": "npm run lint:staged ",
      "pre-push": "npm run lint && npm test"
    }
  },
  "lint-staged": {
    "*.js": [
      "npm run lint:eslint:fix",
      "git add --force",
      "jest --bail --findRelatedTests"
    ],
    "*.json": [
      "prettier --write",
      "git add --force"
    ]
  },
  "dependencies": {
    "@babel/polyfill": "7.0.0",
    "@loadable/component": "5.15.2",
    "@reduxjs/toolkit": "1.5.0",
    "axios": "0.21.1",
    "babel-polyfill": "6.23.0",
    "chalk": "2.4.1",
    "compression": "1.7.3",
    "createjs-module": "0.8.3",
    "cropperjs": "1.2.2",
    "cross-env": "5.2.0",
    "dompurify": "2.2.7",
    "dotenv-webpack": "1.5.5",
    "express": "4.16.4",
    "final-form": "4.20.1",
    "final-form-arrays": "3.0.2",
    "final-form-set-field-data": "^1.0.2",
    "fontfaceobserver": "2.0.13",
    "history": "4.7.2",
    "hoist-non-react-statics": "3.0.1",
    "http-proxy-middleware": "0.20.0",
    "intl": "1.2.5",
    "invariant": "2.2.4",
    "ip": "1.1.5",
    "jwt-decode": "2.2.0",
    "lodash": "4.17.21",
    "minimist": "1.2.5",
    "moment": "2.24.0",
    "node-polyfill-webpack-plugin": "1.0.2",
    "prop-types": "15.6.2",
    "react": "17.0.1",
    "react-accessible-accordion": "3.3.3",
    "react-beautiful-dnd": "10.0.3",
    "react-bootstrap": "2.5.0",
    "react-calendar": "2.19.2",
    "react-circular-progressbar": "2.1.0",
    "react-custom-scrollbars": "4.2.1",
    "react-dom": "17.0.1",
    "react-dropzone": "4.2.3",
    "react-final-form": "6.5.9",
    "react-final-form-arrays": "3.1.4",
    "react-final-form-listeners": "1.0.3",
    "react-helmet": "5.2.0",
    "react-intl": "2.7.2",
    "react-moment": "0.7.0",
    "react-oauth2-code-pkce": "1.13.2",
    "react-pdf": "4.1.0",
    "react-quill": "2.0.0",
    "react-redux": "7.2.2",
    "react-redux-toastr": "7.4.5",
    "react-router-dom": "5.2.0",
    "react-select": "5.4.0",
    "react-tooltip": "4.2.21",
    "redux": "4.0.5",
    "redux-saga": "1.1.3",
    "reselect": "4.0.0",
    "sanitize.css": "4.1.0",
    "twix": "1.3.0"
  },
  "devDependencies": {
    "@babel/cli": "7.20.7",
    "@babel/core": "7.20.7",
    "@babel/plugin-transform-modules-commonjs": "7.20.11",
    "@babel/plugin-transform-react-constant-elements": "7.20.2",
    "@babel/plugin-transform-react-inline-elements": "7.18.6",
    "@babel/preset-env": "7.20.2",
    "@babel/preset-react": "7.18.6",
    "@babel/register": "7.18.9",
    "@loadable/babel-plugin": "5.15.3",
    "@loadable/webpack-plugin": "5.15.2",
    "@testing-library/jest-dom": "5.16.5",
    "@testing-library/react": "12.1.5",
    "@testing-library/user-event": "14.4.3",
    "@wojtekmaj/enzyme-adapter-react-17": "0.4.1",
    "add-asset-html-webpack-plugin": "3.1.1",
    "babel-eslint": "10.1.0",
    "babel-loader": "9.1.2",
    "babel-plugin-dynamic-import-node": "2.3.3",
    "babel-plugin-lodash": "3.3.4",
    "babel-plugin-react-intl": "3.0.1",
    "babel-plugin-react-transform": "3.0.0",
    "babel-plugin-transform-react-remove-prop-types": "0.4.19",
    "circular-dependency-plugin": "5.0.2",
    "circular-json": "0.5.1",
    "compare-versions": "3.4.0",
    "compression-webpack-plugin": "7.1.2",
    "coveralls": "3.0.2",
    "css-loader": "5.0.1",
    "enzyme": "3.11.0",
    "enzyme-react-intl": "2.0.5",
    "enzyme-to-json": "3.3.4",
    "eslint": "5.7.0",
    "eslint-config-airbnb": "17.1.0",
    "eslint-config-airbnb-base": "13.1.0",
    "eslint-config-prettier": "3.1.0",
    "eslint-import-resolver-webpack": "0.10.1",
    "eslint-plugin-import": "2.14.0",
    "eslint-plugin-jsx-a11y": "6.1.2",
    "eslint-plugin-prettier": "3.0.0",
    "eslint-plugin-react": "7.11.1",
    "eslint-plugin-react-hooks": "4.2.0",
    "eslint-plugin-redux-saga": "1.2.1",
    "esquery": "1.0.0",
    "eventsource-polyfill": "0.9.6",
    "exports-loader": "2.0.0",
    "file-loader": "6.2.0",
    "file-saver": "2.0.2",
    "html-loader": "1.3.2",
    "html-webpack-plugin": "4.5.1",
    "husky": "4.3.8",
    "identity-obj-proxy": "3.0.0",
    "imports-loader": "2.0.0",
    "jest": "29.3.1",
    "jest-canvas-mock": "1.1.0",
    "jest-cli": "29.3.1",
    "jest-environment-jsdom": "29.3.1",
    "jest-watch-toggle-config": "2.0.1",
    "lint-staged": "7.3.0",
    "msw": "1.1.0",
    "node-plop": "0.16.0",
    "node-sass": "5.0.0",
    "null-loader": "4.0.1",
    "prettier": "1.14.3",
    "prettier-eslint": "8.8.2",
    "prettier-eslint-cli": "4.7.1",
    "react-app-polyfill": "0.1.3",
    "react-test-renderer": "16.6.0",
    "redux-saga-test-plan": "4.0.1",
    "rimraf": "2.6.2",
    "sass-loader": "10.1.1",
    "script-loader": "0.7.2",
    "shelljs": "0.8.3",
    "sinon": "4.2.0",
    "style-loader": "2.0.0",
    "stylelint": "9.6.0",
    "stylelint-config-recommended": "2.1.0",
    "svg-url-loader": "7.1.1",
    "url-loader": "4.1.1",
    "webpack": "5.20.1",
    "webpack-cli": "4.10.0",
    "webpack-dev-middleware": "4.1.0",
    "webpack-dev-server": "3.11.2",
    "webpack-hot-middleware": "2.25.0",
    "webpack-pwa-manifest": "4.3.0",
    "whatwg-fetch": "2.0.3"
  }
}


===============================







